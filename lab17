<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crypto Monitor – Trade-Daten mit Alarm & Fortschrittsbalken</title>
    <style>
        body {
            background-color: #121212;
            color: #e0e0e0;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        /* Navigation */
        #navMenu {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 70px;
            background: rgba(53,53,53,0.95);
            box-shadow: 0 4px 20px rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1100;
        }
        #navMenu .menu-item {
            margin: 0 15px;
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 16px;
        }
        #navMenu .menu-item a {
            color: #e0e0e0;
            text-decoration: none;
            padding: 5px 10px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        #navMenu .menu-item:hover a {
            text-shadow: 0 0 5px #666;
        }
        /* Alarm-Toggle: Wenn aktiviert, leuchtet die Glocke mit einem grünen Glow */
        #alarmToggle.active {
            color: #28a745 !important;
            background-color: rgba(40, 167, 69, 0.2);
            box-shadow: 0 0 8px rgba(40, 167, 69, 0.8);
        }
        /* Asset Grid */
        .asset-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));
            gap: 20px;
            margin-top: 100px; /* Platz für Navigation */
        }
        .asset-tile {
            background: rgba(105,93,79,0.9);
            border-radius: 8px;
            padding: 15px;
            font-size: 14px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            min-height: 220px;
        }
        .asset-tile h2 {
            margin-bottom: 10px;
            text-align: center;
        }
        /* Fortschrittsbalken */
        .progress-container {
            width: 100%;
            background-color: #333;
            border-radius: 5px;
            overflow: hidden;
            margin: 10px 0;
            height: 10px;
        }
        .progress-bar {
            height: 100%;
            width: 0%;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
    </style>
</head>
<body>
    <nav id="navMenu">
        <div class="menu-item">
            <a href="index.html"><i data-feather="home"></i> Home</a>
        </div>
        <div class="menu-item">
            <a href="#" id="dashboardToggle"><i data-feather="activity"></i> Scannen</a>
        </div>
        <div class="menu-item">
            <a href="settings.html"><i data-feather="settings"></i> Einstellungen</a>
        </div>
        <div class="menu-item">
            <a href="#" id="alarmToggle"><i data-feather="bell"></i> Alarm</a>
        </div>
    </nav>

    <div class="asset-grid" id="assetGrid"></div>

    <audio id="alarmAudio" src="alarm.mp3" preload="auto"></audio>

    <script src="https://unpkg.com/feather-icons"></script>
    <script>
        // Initialisiere Feather Icons
        feather.replace();

        // Globaler Alarm-Status und Timer
        let alarmEnabled = false;
        const alarmLastPlayed = {}; // Speichert zuletzt gespielte Zeiten pro Symbol
        const alarmCooldown = 30000; // 30 Sekunden Cooldown
        const historicalDataCooldown = 15000; // Cooldown 15 Sekunden
        const lastHistoricalDataFetch = {}; // Speichert den letzten Abrufzeitpunkt
        const lastMACDData = {}; // Speichert die letzten MACD-Daten pro Symbol

        // Alarm-Toggle: Klick auf den Alarm-Button schaltet das Audio-Signal an/aus
        document.getElementById("alarmToggle").addEventListener("click", function(e) {
            e.preventDefault();
            alarmEnabled = !alarmEnabled;
            this.classList.toggle("active", alarmEnabled);
            console.log("Alarm ist jetzt", alarmEnabled ? "aktiv" : "inaktiv");
            if (alarmEnabled) {
                document.getElementById("alarmAudio").play(); // Sofortiges Abspielen bei Aktivierung
            }
        });

        // Definiere die Watchlist – alle gültigen Handelspaare in fester Reihenfolge
        const watchlist = [
            "BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "ADAUSDT",
            "DOTUSDT", "LINKUSDT", "AVAXUSDT", "DOGEUSDT", "TRXUSDT", "ARBUSDT"
        ];

        // Pre-Render aller Tiles: Feste Reihenfolge gewährleisten
        function preRenderTiles() {
            const grid = document.getElementById("assetGrid");
            grid.innerHTML = "";
            watchlist.forEach(symbol => {
                const tile = document.createElement("div");
                tile.className = "asset-tile";
                tile.id = `tile-${symbol}`;
                tile.innerHTML = `<h2>${symbol.replace("USDT", "")}</h2><div>Lade Daten...</div>`;
                grid.appendChild(tile);
                lastHistoricalDataFetch[symbol] = 0; // Initialisiere Zeitstempel
                lastMACDData[symbol] = { macd: "Lädt...", signal: "Lädt..." };
            });
        }
        preRenderTiles();

        // Datenstruktur für die letzten Tiefstkurse
        const lastLows = {};
        const lowHistorySize = 5; // Speichern der letzten 5 Tiefstkurse
        const bestEntryPuffer = 0.99; // 1% Puffer unter dem niedrigsten Tief

        // WebSocket-Konfiguration
        const wsSymbols = watchlist.map(s => s.toLowerCase());
        const streamString = wsSymbols.map(s => `${s}@ticker`).join("/");
        const wsEndpoint = `wss://stream.binance.com:9443/stream?streams=${streamString}`;
        const ws = new WebSocket(wsEndpoint);

        ws.onopen = () => {
            console.log("WebSocket verbunden:", wsEndpoint);
            watchlist.forEach(symbol => {
                lastLows[symbol] = [];
            });
        };

        ws.onmessage = event => {
            const json = JSON.parse(event.data);
            const data = json.data;
            const symbol = data.s;
            
            // Aktualisiere die Liste der letzten Tiefstkurse
            if (data.l) {
                lastLows[symbol].push(parseFloat(data.l));
                if (lastLows[symbol].length > lowHistorySize) {
                    lastLows[symbol].shift();
                }
            }
            
            updateTileViaWS(symbol, data);
        };

        ws.onerror = error => {
            console.error("WebSocket-Fehler:", error);
        };

        ws.onclose = () => {
            console.log("WebSocket-Verbindung geschlossen");
        };

        async function fetchHistoricalKlines(symbol, interval, limit) {
            try {
                const res = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=${interval}&limit=${limit}`);
                if (!res.ok) {
                    throw new Error(`HTTP-Error: ${res.status}`);
                }
                const klines = await res.json();
                return klines.map(kline => parseFloat(kline[4]));
            } catch (error) {
                console.error(`Fehler beim Abruf der historischen Klines für ${symbol} (${interval}, ${limit}):`, error);
                return [];
            }
        }

        function calculateEMA(prices, period) {
            if (!prices || prices.length === 0) return 0;
            let ema = [];
            const multiplier = 2 / (period + 1);
            ema[0] = prices[0];
            for (let i = 1; i < prices.length; i++) {
                ema[i] = (prices[i] - ema[i - 1]) * multiplier + ema[i - 1];
            }
            return ema[prices.length - 1];
        }

        function calculateMACD(closePrices) {
            if (closePrices.length < 26) {
                return null;
            }
            const ema12 = calculateEMA(closePrices.slice(-12), 12);
            const ema26 = calculateEMA(closePrices.slice(-26), 26);
            const macdLine = ema12 - ema26;
            const signalLine = calculateEMA(closePrices.slice(-21).concat([macdLine]), 9);
            return { macd: macdLine.toFixed(2), signal: signalLine.toFixed(2) };
        }

        // Modularisierte Funktion zur Aktualisierung eines Tiles
        async function updateTileViaWS(symbol, data) {
            const tile = document.getElementById(`tile-${symbol}`);
            if (!tile) return;
            const displayName = symbol.replace("USDT", "");
            const currentPrice = parseFloat(data.c);
            
            // Berechne Best Entry basierend auf den letzten Tiefstkursen
            let bestEntry = "Lädt...";
            if (lastLows[symbol] && lastLows[symbol].length > 0) {
                const lowestLow = Math.min(...lastLows[symbol]);
                bestEntry = (lowestLow * bestEntryPuffer).toFixed(2);
            }
            
            const tp2 = currentPrice * 1.05;
            const sl = currentPrice * 0.97;
            const safeTP1 = (tp2 + sl) / 2;
            const rewardRisk = (tp2 - parseFloat(bestEntry)) / (parseFloat(bestEntry) - sl);
            const entryDeviation = (currentPrice - parseFloat(bestEntry)) / parseFloat(bestEntry);
            const alpha = 2;
            const tradeScore = rewardRisk - (alpha * entryDeviation);
            const crv = (safeTP1 - parseFloat(bestEntry)) / (parseFloat(bestEntry) - sl);
            
            // Berechne Fortschritt in Prozent zwischen SL und TP2
            let progressPercent = ((currentPrice - sl) / (tp2 - sl)) * 100;
            progressPercent = Math.max(0, Math.min(progressPercent, 100));
            
            // Wähle die Farbe des Fortschrittsbalkens anhand des Trade-Scores
            let progressColor = tradeScore >= 2 ? "#28a745" :
                                tradeScore >= 1 ? "#ffc107" : "#dc3545";
            
            // Setze das initiale HTML des Tiles
            tile.innerHTML = `
                <h2>${displayName}</h2>
                <div>Preis: ${currentPrice.toFixed(2)}</div>
                <div>24h Veränderung: ${parseFloat(data.P).toFixed(2)}%</div>
                <div>24h Volumen: ${parseFloat(data.v).toFixed(2)}</div>
                <div>MACD: ${lastMACDData[symbol].macd}</div>
                <div>Signal: ${lastMACDData[symbol].signal}</div>
                <div class="progress-container">
                    <div class="progress-bar" id="progressBar-${symbol}" style="width: ${progressPercent}%; background-color: ${progressColor};"></div>
                </div>
                <div>Best Entry: ${bestEntry}</div>
                <div>Sicherer TP1: ${safeTP1.toFixed(2)}</div>
                <div>TP2: ${tp2.toFixed(2)}</div>
                <div>SL: ${sl.toFixed(2)}</div>
                <div>CRV: ${crv.toFixed(2)}</div>
                <div>Trade Score: ${tradeScore.toFixed(2)}</div>
                <div>RSI: Lädt...</div>
            `;
            
            // Handle asynchrone Datenaktualisierungen, sofern Cooldown abgelaufen ist
            const now = Date.now();
            if (!lastHistoricalDataFetch[symbol] || (now - lastHistoricalDataFetch[symbol]) > historicalDataCooldown) {
                lastHistoricalDataFetch[symbol] = now;
                updateMACD(symbol);
                updateRSI(symbol);
            }
            
            // Alarm-Logik in separate Funktion auslagern
            checkAndPlayAlarm(symbol, tradeScore, bestEntry);
        }

        async function updateMACD(symbol) {
            try {
                const historicalPrices = await fetchHistoricalKlines(symbol, "1h", 28);
                const macdData = calculateMACD(historicalPrices);
                if (macdData) {
                    lastMACDData[symbol] = macdData;
                    const tile = document.getElementById(`tile-${symbol}`);
                    if (tile) {
                        tile.innerHTML = tile.innerHTML.replace(/MACD: .*?</, `MACD: ${macdData.macd}<`)
                                                       .replace(/Signal: .*?</, `Signal: ${macdData.signal}<`);
                    }
                }
            } catch (error) {
                console.error("Fehler beim MACD-Abruf:", error);
            }
        }

        async function updateRSI(symbol) {
            try {
                const rsiValue = await fetchRSI(symbol);
                const tile = document.getElementById(`tile-${symbol}`);
                if (tile) {
                    tile.innerHTML = tile.innerHTML.replace("RSI: Lädt...", `RSI: ${rsiValue.toFixed(2)}`);
                }
            } catch (error) {
                console.error("Fehler beim RSI-Abruf:", error);
            }
        }

        function checkAndPlayAlarm(symbol, tradeScore, bestEntry) {
            if (alarmEnabled && tradeScore >= 2 && bestEntry !== "Lädt...") {
                const now = Date.now();
                if (!alarmLastPlayed[symbol] || (now - alarmLastPlayed[symbol]) > alarmCooldown) {
                    document.getElementById("alarmAudio").play();
                    alarmLastPlayed[symbol] = now;
                }
            }
        }

        // Berechnet den RSI anhand der letzten 14 1h-Kerzen
        async function fetchRSI(symbol) {
            try {
                const res = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=1h&limit=14`);
                if (!res.ok) throw new Error(`HTTP-Error: ${res.status}`);
                const klines = await res.json();
                let gains = 0, losses = 0;
                for (let i = 1; i < klines.length; i++) {
                    const change = parseFloat(klines[i][4]) - parseFloat(klines[i - 1][4]);
                    if (change > 0) gains += change;
                    else losses += Math.abs(change);
                }
                const period = klines.length - 1;
                const avgGain = gains / period;
                const avgLoss = losses / period;
                const rs = (avgLoss === 0) ? 100 : (avgGain / avgLoss);
                return 100 - (100 / (1 + rs));
            } catch (error) {
                console.error(`Fehler beim Abruf des RSI für ${symbol}:`, error);
                return 50;
            }
        }
    </script>
</body>
</html>